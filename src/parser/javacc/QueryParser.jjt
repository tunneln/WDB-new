options {
	MULTI=true;
	NODE_DEFAULT_VOID=true;
	STATIC=true;
	NODE_PREFIX="";
	NODE_USES_PARSER=true;
}

PARSER_BEGIN(QueryParser)

package wdb.parser;

import wdb.metadata.*;
import java.io.*;

/**
 * @author Bo Li
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class QueryParser {
	public Query lastQuery;
	
	public Query getNextQuery() throws ParseException, TokenMgrError
	{
		lastQuery = QueryParser.Start();
		return lastQuery;
	}
}

PARSER_END(QueryParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r")> 
}

TOKEN [IGNORE_CASE]:
{
    <LP: "(">
  | <RP: ")">
  | <LB: "[">
  | <RB: "]">
  | <COLON: ":">
  | <SC: ";">
  | <COMMA: ",">
  | <CLASS: "CLASS">
  | <SUBCLASS: "SUBCLASS">
  | <OF: "OF">
  | <INVERSE: "INVERSE IS">
  | <INSERT: "INSERT">
  | <INCLUDE: "INCLUDE">
  | <EXCLUDE: "EXCLUDE">
  | <WITH: "WITH">
  | <ASSN: ":=">
  | <SV: ( "SV" | "SINGLEVALUED" )>
  | <MV: ( "MV" | "MULTIVALUED" )>
  | <REQUIRED: "REQUIRED">
  | <RETRIEVE: "RETRIEVE">
  | <WHERE: "WHERE">
  | <FROM: "FROM">
  | <AND: "AND">
  | <OR: "OR" >
  | <NOT: "NOT" >
  | <GT: ">">
  | <LT: "<">
  | <EQ: "=">
  | <GTE: ">=">
  | <LTE: "<=">
  | <NEQ: "<>">
  | <TRUE: "TRUE">
  | <FALSE: "FALSE">
  | <INT: "INTEGER">
  | <REAL: "REAL">
  | <CHAR: "CHAR">
  | <BOOLEAN: "BOOLEAN">
  | <STRING: "STRING">
  | <ASTERISK: "*">
  | <SOURCE: "SOURCE">
  | <INDEX: "INDEX">
  | <ON: "ON">
  | <UNIQUE: "UNIQUE">
  | <DISTINCT: "DISTINCT">
  | <MAX: "MAX">
  | <QUIT: "QUIT">
  | <MODIFY: "MODIFY">
  | <LIMIT: "LIMIT">
  | <ALL: "ALL">
  | <INITIALVALUE: "INITIALVALUE">
}

TOKEN:
{
    < INTEGER: (["-"])? (["0"-"9"])+ >
}

TOKEN: 
{
    < IDENTIFIER: [ "A"-"Z", "a"-"z" ]
  				( [ "A"-"Z", "a"-"z", "0"-"9", "_", "-" ] )*
  				[ "A"-"Z", "a"-"z", "0"-"9" ] >
}

TOKEN:
{
	< LSTRING: "\'" [ "0"-"9", "A"-"Z", "a"-"z" ]
 					( [ " ", "!", "#"-"&", "("-"_", "a"-"~" ] )* 
 					"\'" >
}

TOKEN: 
{
    < QSTRING: "\"" ( [ " ", "!", "#"-")", "*"-"~" ] )* "\"" >
}

TOKEN:
{
    <ERROR: ~[] >
}
    
Query Start() :
{ 
	Query q;
}
{
	( q = Class() | q = Subclass() | q = Insert() | q = Retrieve() | q = Source() |
	  q = Index() | q = Modify() )
	{
	  return q;
	}
	|
	<EOF>
	{
		return null;
	}
	|
	<QUIT>
	{
	  return null;
	}
}

Query Class() :
{ 
	ClassDef cq = new ClassDef();
}
{
    <CLASS> 
    ( cq.name = getIdentifier() | cq.name = getLString() ) ( cq.comment= getQString() )* <LP> ( Attrs(cq) )* <RP> <SC>
    {
    	return cq;
    }
}

Query Subclass() :
{
	SubclassDef sq = new SubclassDef();
}
{
    <SUBCLASS>
    ( sq.name = getIdentifier() | sq.name = getLString() ) ( sq.comment = getQString() )* Parents(sq) <LP> ( Attrs(sq) )* <RP> <SC>
    {
    	return sq;
    }
}

Query Insert() :
{
	InsertQuery iq = new InsertQuery();
}
{
	<INSERT>
	( iq.className = getIdentifier() | iq.className = getLString() ) 
	(
		<FROM> iq.fromClassName = getIdentifier() <WHERE> iq.expression = getExpression()
	)?
	<LP> ( Assignments(iq) ( <COMMA> Assignments(iq) )* )? <RP> <SC>
	{
		return iq;
	}
}

Query Retrieve() :
{
	RetrieveQuery rq = new RetrieveQuery();
	Token t;
}
{
	<FROM> ( rq.className = getIdentifier() | rq.className = getLString() ) 
	<RETRIEVE> AttributePath(rq) 
	( <COMMA> AttributePath(rq) )* ( <WHERE> rq.expression = getExpression() )? <SC>
	{
		return rq;
	}
}

Query Source() :
{
	SourceQuery sq = new SourceQuery();
}
{
	<SOURCE>
	( sq.filename = getQString() )
	<SC>
	{
		return sq;
	}
}

Query Index() :
{
  IndexDef indxQ = new IndexDef();
  String dva;
}
{
  <INDEX> ( indxQ.name = getIdentifier() ) ( indxQ.comment = getQString() )?
  <ON> ( indxQ.className = getIdentifier() )
  <LP> ( dva = getIdentifier() )
  {
    indxQ.addDva(dva);
  }
  (
    <COMMA> ( dva = getIdentifier() )
    {
      indxQ.addDva(dva);
    }
  )*
  <RP>
  (
    <UNIQUE>
    {
      indxQ.unique = true;
    }
  )?
  <SC>
  {
    return indxQ;
  }
}

Query Modify() :
{
  ModifyQuery mq = new ModifyQuery();
}
{
  <MODIFY>
  (
    <LIMIT> <EQ> 
    (
      ( mq.limit = getInteger() )
      |
      <ALL> { mq.limit = -1; }
    )
  )?
  ( mq.className = getIdentifier() | mq.className = getLString() )
  <LP> ( Assignments(mq) ( <COMMA> Assignments(mq) )* )? <RP>
  <WHERE> mq.expression = getExpression() <SC>
	{
		return mq;
	}
}

void AttributePath(RetrieveQuery rq) :
{
	AttributePath attributePath = new AttributePath();
	String eva;
	Token t;
}
{
	(
		attributePath.attribute = getIdentifier()
		(
			<LB> attributePath.index = getInteger() <RB>
		)?
		|
		t = <ASTERISK>
		{
			attributePath.attribute = t.image;
		}
	)
	(
		<OF> eva = getIdentifier()
		{
			attributePath.addIndirection(eva);
		}
		(
			LOOKAHEAD(5) <COMMA> <OF> eva = getIdentifier()
			{
				attributePath.addIndirection(eva);
			}
		)*
	)?
	{
		rq.addAttributePath(attributePath);
	}
}
		
void Assignments(UpdateQuery uq) :
{ }
{
	  LOOKAHEAD(5) DvaAssign(uq)
	| LOOKAHEAD(5) EvaAssign(uq)
	{ }
}

void DvaAssign(UpdateQuery uq) :
{
	DvaAssignment dvaAssign = new DvaAssignment();
}
{
	dvaAssign.AttributeName = getIdentifier() 
	(
		<LB> dvaAssign.Index = getInteger() <RB>
	)?
	<ASSN>
	(
		dvaAssign.Value = getBoolean()
		{
			uq.addAssignment(dvaAssign);
		}
		|
		dvaAssign.Value = getQString()
		{
			uq.addAssignment(dvaAssign);
		}
		|
		dvaAssign.Value = getInteger()
		{
			uq.addAssignment(dvaAssign);
		}
	)
}

void EvaAssign(UpdateQuery uq) :
{
	EvaAssignment evaAssign = new EvaAssignment();
}
{
	evaAssign.AttributeName = getIdentifier() 
	<ASSN>
	( 
		<INCLUDE>
		{
			evaAssign.mode = EvaAssignment.INCLUDE_MODE;
		}
		|
		<EXCLUDE>
		{
		  if(uq.getClass() != ModifyQuery.class)
		  {
		    throw new ParseException("EXCLUDE option applies to MODIFY queries only");
		  }
		  else
		  {
		    evaAssign.mode = EvaAssignment.EXCLUDE_MODE;
		  }
		}
	)?
	( evaAssign.targetClass = getIdentifier() | evaAssign.targetClass = getLString() )
	<WITH>
	<LP>
	evaAssign.expression = getExpression()
	<RP>
	{
		uq.addAssignment(evaAssign);
	}
}

void Parents(SubclassDef sq) :
{
	String parent;
}
{
      <OF> ( parent = getIdentifier() | parent = getLString() )
      {
      	sq.addSuperClass(parent);
      }
      ( 
      	<AND> ( parent = getIdentifier() | parent = getLString() )
      	{
      		sq.addSuperClass(parent);
      	}
      )* 

}

void Attrs(ClassDef cq) :
{ }
{
      LOOKAHEAD(5) Dva(cq)
    | LOOKAHEAD(5) Eva(cq)
    { }
}

void Dva(ClassDef cq) :
{ 
	DVA dva = new DVA();
}
{
	dva.name = getIdentifier() 
	( 
		dva.comment = getQString() 
	)? 
	<COLON> dva.type = getType() 
	( <LB> dva.size = getInteger() <RB> )?
	( <COMMA> DvaOptions(dva) )*
	<SC>
  {
		cq.addAttribute(dva);
  }
}

void DvaOptions(DVA dva) :
{ }
{
  (
    <INITIALVALUE>
    {
      if(dva.initialValue != null)
      {
        throw new ParseException("INITIALVALUE option alreadly specifed for DVA " + dva.name);
      }
    }
    (
      ( dva.initialValue = getQString() )
      |
      ( dva.initialValue = getInteger() )
      |
      ( dva.initialValue = getBoolean() )
    )
    {
      if(!dva.initialValue.getClass().toString().toLowerCase().equals(dva.type))
      {
        throw new ParseException("INITIALVALUE option for DVA " + dva.name +
        " must specify a value of " + dva.initialValue.getClass().toString() +
        " type");
      }
    }
  )
  |
  <REQUIRED>
  {
    if(dva.required != null)
    {
      throw new ParseException("REQUIRED option alreadly specified");
    }
    else
    {
      dva.required = true;
    }
  }
}

void Eva(ClassDef cq) :
{
	EVA eva = new EVA();
}
{
  eva.name = getIdentifier() 
  ( 
  	eva.comment = getQString() 
  )?
  <COLON> 
  ( eva.baseClassName = getIdentifier() | eva.baseClassName = getLString() )
  ( <COMMA> EvaOptions(eva) )* 
  <SC>
  {
    if(eva.inverseEVA == null)
    {
      throw new ParseException("Inverse EVA option for EVA " + eva.name + " must be specified");
    }
    if(eva.cardinality == null)
    {
      eva.cardinality = EVA.SINGLEVALUED;
    }
  	cq.addAttribute(eva);
  }
}

void EvaOptions(EVA eva) :
{ }
{
  <SV>
  {
    if(eva.cardinality != null)
    {
      throw new ParseException("EVA " + eva.name + " can not be declared both single-valued and multi-valued");
    }
    else
    {
      eva.cardinality = EVA.SINGLEVALUED;
    }
  }
  |
  (
    <MV>
    {
      if(eva.cardinality != null)
      {
        throw new ParseException("EVA " + eva.name + " can not be declared both single-valued and multi-valued");
      }
      else
      {
        eva.cardinality = EVA.MULTIVALUED;
      }
    }
    (
      <LP> EvaMultivaluedOptions(eva)
      ( <COMMA> EvaMultivaluedOptions(eva) )*
      <RP>
    )?
  )
  |
  <REQUIRED>
  {
    if(eva.required != null)
    {
      throw new ParseException("REQUIRED option alreadly specified for EVA " + eva.name);
    }
    else
    {
      eva.required = true;
    }
  }
  |
  (
    <INVERSE>
    {
     if(eva.inverseEVA != null)
     {
       throw new ParseException("INVERSE IS option alreadly spcified for EVA " + eva.name);
     }
    }
    ( eva.inverseEVA = getIdentifier() )
  )
}

void EvaMultivaluedOptions(EVA eva) :
{ }
{
  <DISTINCT>
  {
    if(eva.cardinality != EVA.MULTIVALUED || eva.distinct != null)
    {
      throw new ParseException("DISTINCT option alreadly specified or not applicable to EVA " + eva.name);
    }
    else
    {
      eva.distinct = true;
    }
  }
  |
  (
    <MAX>
    {
      if(eva.cardinality != EVA.MULTIVALUED || eva.max != null)
      {
        throw new ParseException("MAX option alreadly specified or not applicable to EVA " + eva.name);
      }
    }
    ( eva.max = getInteger() )
  )
}

SimpleNode getExpression() #Root : {}
{
  OrExpression()
  { return jjtThis; }
}

void OrExpression() #Or(>1) : {}
{
  AndExpression() ( <OR> OrExpression() )?
}

void AndExpression() #And(>1) : {}
{
  UnaryExpression() ( <AND> AndExpression() )?
}

void UnaryExpression() : {}
{
  BoolExpression() | NotExpression()
}

void NotExpression() #Not : {}
{
  <NOT> BoolExpression()
}

void BoolExpression() : {}
{
  <LP> OrExpression() <RP> | CondExpression() | TrueExpression() | FalseExpression()
}

void CondExpression() #Cond : 
{
	AttributePath attributePath;
	Object value;
	String quantifier;
}
{ 
  attributePath=getAbsoluteAttributePath()
  {
	jjtThis.setAttribute(attributePath);
  }
  quantifier=getQuantifier()
  {
	jjtThis.setQuantifier(quantifier);
  }
  (
	  value=getBoolean()
	  {
	  	jjtThis.setValue(value);
	  }
	  |
	  value=getQString() 
	  {
		jjtThis.setValue(value);
	  }
	  |
	  value=getInteger()
	  {
	  	jjtThis.setValue(value);
	  }
  )
}

AttributePath getAbsoluteAttributePath() :
{
	AttributePath attributePath = new AttributePath();
	String eva;
	Token t;
}
{
	(
		attributePath.attribute = getIdentifier()
		(
			<LB> attributePath.index = getInteger() <RB>
		)?
	)
	(
		<OF> eva = getIdentifier()
		{
			attributePath.addIndirection(eva);
		}
		(
			LOOKAHEAD(5) <COMMA> <OF> eva = getIdentifier()
			{
				attributePath.addIndirection(eva);
			}
		)*
	)?
	{
		return attributePath;
	}
}

void TrueExpression() #True : {}
{
	<TRUE>
}

void FalseExpression() #False : {}
{
	<FALSE>
}

String getQuantifier() : 
{
	Token t;	
	String s = new String("");
}
{
	t = <EQ> 
	{
		s = s + t.image;
		return s.trim();
	}
	| 
	t = <NEQ> 
	{
		s = s + t.image;
		return s.trim();
	}
	| 
	t = <GT> 
	{
		s = s + t.image;
		return s.trim();
	}
	|
	t = <LT> 
	{
		s = s + t.image;
		return s.trim();
	}
	| 
	t = <GTE>
	{
		s = s + t.image;
		return s.trim();
	}
	| 
	t = <LTE> 
	{
		s = s + t.image;
		return s.trim();
	}
}

String getType() :
{ Token t = new Token();
  String s = new String("");
  char[] cs;
}
{ 
  t = <INT>
  { s = s + t.image;
  	cs = s.toLowerCase().trim().toCharArray();
  	cs[0] -= 32;
    return new String(cs);
  } 
  | 
  t = <REAL> 
  { s = s + t.image;
  	cs = s.toLowerCase().trim().toCharArray();
  	cs[0] -= 32;
    return new String(cs);
  }
  | 
  t = <CHAR>
  { s = s + t.image;
  	cs = s.toLowerCase().trim().toCharArray();
  	cs[0] -= 32;
    return new String(cs);
  } 
  | 
  t = <BOOLEAN>
  { s = s + t.image;
  	cs = s.toLowerCase().trim().toCharArray();
  	cs[0] -= 32;
    return new String(cs);
  } 
  | 
  t = <STRING>
  { s = s + t.image;
  	cs = s.toLowerCase().trim().toCharArray();
  	cs[0] -= 32;
    return new String(cs);
  }
}

String getIdentifier() :
{ Token t;
  String s = new String("");
}
{
  t = <IDENTIFIER>
  { s = s + t.image;
    return s.toLowerCase().replace('-', '_').trim();
  }
}

String getLString() :
{ Token t;
  String s = new String("");
}
{
  t = <LSTRING>
  { s = s + t.image;
    return s.trim().substring(1, s.trim().length()-1).trim();
  }
}

String getQString() :
{ Token t;
  String s = new String("");
}
{
  t = <QSTRING>
  { s = s + t.image;
    return s.trim().substring(1, s.trim().length()-1).trim();
  }
}

Integer getInteger() :
{ 
	Token t;
	Integer i;
}
{
  t = <INTEGER>
  {
    i = Integer.valueOf(t.image);
    return i;
  }
}

Boolean getBoolean() : 
{
	Token t;	
	String s = new String("");
}
{
	t = <TRUE> 
	{
		return Boolean.TRUE;
	}
	|
	t = <FALSE>
	{
		return Boolean.FALSE;
	}
}
