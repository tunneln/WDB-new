/* Generated By:JJTree&JavaCC: Do not edit this line. QueryParser.java */
package wdb.parser;

import wdb.metadata.*;
import java.io.*;

/**
 * @author Bo Li
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class QueryParser/*@bgen(jjtree)*/implements QueryParserTreeConstants, QueryParserConstants {/*@bgen(jjtree)*/
  protected static JJTQueryParserState jjtree = new JJTQueryParserState();public Query lastQuery;

        public Query getNextQuery() throws ParseException, TokenMgrError
        {
                lastQuery = QueryParser.Start();
                return lastQuery;
        }

  static final public Query Start() throws ParseException {
        Query q;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
    case SUBCLASS:
    case INSERT:
    case FROM:
    case SOURCE:
    case INDEX:
    case MODIFY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        q = Class();
        break;
      case SUBCLASS:
        q = Subclass();
        break;
      case INSERT:
        q = Insert();
        break;
      case FROM:
        q = Retrieve();
        break;
      case SOURCE:
        q = Source();
        break;
      case INDEX:
        q = Index();
        break;
      case MODIFY:
        q = Modify();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return q;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return null;}
      break;
    case QUIT:
      jj_consume_token(QUIT);
          {if (true) return null;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Query Class() throws ParseException {
        ClassDef cq = new ClassDef();
    jj_consume_token(CLASS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      cq.name = getIdentifier();
      break;
    case LSTRING:
      cq.name = getLString();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QSTRING:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      cq.comment = getQString();
    }
    jj_consume_token(LP);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      Attrs(cq);
    }
    jj_consume_token(RP);
    jj_consume_token(SC);
        {if (true) return cq;}
    throw new Error("Missing return statement in function");
  }

  static final public Query Subclass() throws ParseException {
        SubclassDef sq = new SubclassDef();
    jj_consume_token(SUBCLASS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      sq.name = getIdentifier();
      break;
    case LSTRING:
      sq.name = getLString();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QSTRING:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      sq.comment = getQString();
    }
    Parents(sq);
    jj_consume_token(LP);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      Attrs(sq);
    }
    jj_consume_token(RP);
    jj_consume_token(SC);
        {if (true) return sq;}
    throw new Error("Missing return statement in function");
  }

  static final public Query Insert() throws ParseException {
        InsertQuery iq = new InsertQuery();
    jj_consume_token(INSERT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      iq.className = getIdentifier();
      break;
    case LSTRING:
      iq.className = getLString();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      jj_consume_token(FROM);
      iq.fromClassName = getIdentifier();
      jj_consume_token(WHERE);
      iq.expression = getExpression();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Assignments(iq);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        Assignments(iq);
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    jj_consume_token(SC);
                {if (true) return iq;}
    throw new Error("Missing return statement in function");
  }

  static final public Query Retrieve() throws ParseException {
        RetrieveQuery rq = new RetrieveQuery();
        Token t;
    jj_consume_token(FROM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      rq.className = getIdentifier();
      break;
    case LSTRING:
      rq.className = getLString();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RETRIEVE);
    AttributePath(rq);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      AttributePath(rq);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      rq.expression = getExpression();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(SC);
                {if (true) return rq;}
    throw new Error("Missing return statement in function");
  }

  static final public Query Source() throws ParseException {
        SourceQuery sq = new SourceQuery();
    jj_consume_token(SOURCE);
    sq.filename = getQString();
    jj_consume_token(SC);
                {if (true) return sq;}
    throw new Error("Missing return statement in function");
  }

  static final public Query Index() throws ParseException {
  IndexDef indxQ = new IndexDef();
  String dva;
    jj_consume_token(INDEX);
    indxQ.name = getIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QSTRING:
      indxQ.comment = getQString();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(ON);
    indxQ.className = getIdentifier();
    jj_consume_token(LP);
    dva = getIdentifier();
    indxQ.addDva(dva);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      dva = getIdentifier();
      indxQ.addDva(dva);
    }
    jj_consume_token(RP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIQUE:
      jj_consume_token(UNIQUE);
      indxQ.unique = true;
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(SC);
    {if (true) return indxQ;}
    throw new Error("Missing return statement in function");
  }

  static final public Query Modify() throws ParseException {
  ModifyQuery mq = new ModifyQuery();
    jj_consume_token(MODIFY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      jj_consume_token(LIMIT);
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        mq.limit = getInteger();
        break;
      case ALL:
        jj_consume_token(ALL);
              mq.limit = -1;
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      mq.className = getIdentifier();
      break;
    case LSTRING:
      mq.className = getLString();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Assignments(mq);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        Assignments(mq);
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(RP);
    jj_consume_token(WHERE);
    mq.expression = getExpression();
    jj_consume_token(SC);
                {if (true) return mq;}
    throw new Error("Missing return statement in function");
  }

  static final public void AttributePath(RetrieveQuery rq) throws ParseException {
        AttributePath attributePath = new AttributePath();
        String eva;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      attributePath.attribute = getIdentifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LB:
        jj_consume_token(LB);
        attributePath.index = getInteger();
        jj_consume_token(RB);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
    case ASTERISK:
      t = jj_consume_token(ASTERISK);
                        attributePath.attribute = t.image;
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OF:
      jj_consume_token(OF);
      eva = getIdentifier();
                        attributePath.addIndirection(eva);
      label_9:
      while (true) {
        if (jj_2_1(5)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(COMMA);
        jj_consume_token(OF);
        eva = getIdentifier();
                                attributePath.addIndirection(eva);
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
                rq.addAttributePath(attributePath);
  }

  static final public void Assignments(UpdateQuery uq) throws ParseException {
    if (jj_2_2(5)) {
      DvaAssign(uq);
    } else if (jj_2_3(5)) {
      EvaAssign(uq);

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DvaAssign(UpdateQuery uq) throws ParseException {
        DvaAssignment dvaAssign = new DvaAssignment();
    dvaAssign.AttributeName = getIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LB:
      jj_consume_token(LB);
      dvaAssign.Index = getInteger();
      jj_consume_token(RB);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(ASSN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
      dvaAssign.Value = getBoolean();
                        uq.addAssignment(dvaAssign);
      break;
    case QSTRING:
      dvaAssign.Value = getQString();
                        uq.addAssignment(dvaAssign);
      break;
    case INTEGER:
      dvaAssign.Value = getInteger();
                        uq.addAssignment(dvaAssign);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EvaAssign(UpdateQuery uq) throws ParseException {
        EvaAssignment evaAssign = new EvaAssignment();
    evaAssign.AttributeName = getIdentifier();
    jj_consume_token(ASSN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCLUDE:
    case EXCLUDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        jj_consume_token(INCLUDE);
                        evaAssign.mode = EvaAssignment.INCLUDE_MODE;
        break;
      case EXCLUDE:
        jj_consume_token(EXCLUDE);
                  if(uq.getClass() != ModifyQuery.class)
                  {
                    {if (true) throw new ParseException("EXCLUDE option applies to MODIFY queries only");}
                  }
                  else
                  {
                    evaAssign.mode = EvaAssignment.EXCLUDE_MODE;
                  }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      evaAssign.targetClass = getIdentifier();
      break;
    case LSTRING:
      evaAssign.targetClass = getLString();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(WITH);
    jj_consume_token(LP);
    evaAssign.expression = getExpression();
    jj_consume_token(RP);
                uq.addAssignment(evaAssign);
  }

  static final public void Parents(SubclassDef sq) throws ParseException {
        String parent;
    jj_consume_token(OF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      parent = getIdentifier();
      break;
    case LSTRING:
      parent = getLString();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        sq.addSuperClass(parent);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_10;
      }
      jj_consume_token(AND);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        parent = getIdentifier();
        break;
      case LSTRING:
        parent = getLString();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                sq.addSuperClass(parent);
    }
  }

  static final public void Attrs(ClassDef cq) throws ParseException {
    if (jj_2_4(5)) {
      Dva(cq);
    } else if (jj_2_5(5)) {
      Eva(cq);

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Dva(ClassDef cq) throws ParseException {
        DVA dva = new DVA();
    dva.name = getIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QSTRING:
      dva.comment = getQString();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    dva.type = getType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LB:
      jj_consume_token(LB);
      dva.size = getInteger();
      jj_consume_token(RB);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      DvaOptions(dva);
    }
    jj_consume_token(SC);
                cq.addAttribute(dva);
  }

  static final public void DvaOptions(DVA dva) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INITIALVALUE:
      jj_consume_token(INITIALVALUE);
      if(dva.initialValue != null)
      {
        {if (true) throw new ParseException("INITIALVALUE option alreadly specifed for DVA " + dva.name);}
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QSTRING:
        dva.initialValue = getQString();
        break;
      case INTEGER:
        dva.initialValue = getInteger();
        break;
      case TRUE:
      case FALSE:
        dva.initialValue = getBoolean();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if(!dva.initialValue.getClass().toString().toLowerCase().equals(dva.type))
      {
        {if (true) throw new ParseException("INITIALVALUE option for DVA " + dva.name +
        " must specify a value of " + dva.initialValue.getClass().toString() +
        " type");}
      }
      break;
    case REQUIRED:
      jj_consume_token(REQUIRED);
    if(dva.required != null)
    {
      {if (true) throw new ParseException("REQUIRED option alreadly specified");}
    }
    else
    {
      dva.required = true;
    }
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Eva(ClassDef cq) throws ParseException {
        EVA eva = new EVA();
    eva.name = getIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QSTRING:
      eva.comment = getQString();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      eva.baseClassName = getIdentifier();
      break;
    case LSTRING:
      eva.baseClassName = getLString();
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      EvaOptions(eva);
    }
    jj_consume_token(SC);
    if(eva.inverseEVA == null)
    {
      {if (true) throw new ParseException("Inverse EVA option for EVA " + eva.name + " must be specified");}
    }
    if(eva.cardinality == null)
    {
      eva.cardinality = EVA.SINGLEVALUED;
    }
        cq.addAttribute(eva);
  }

  static final public void EvaOptions(EVA eva) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SV:
      jj_consume_token(SV);
    if(eva.cardinality != null)
    {
      {if (true) throw new ParseException("EVA " + eva.name + " can not be declared both single-valued and multi-valued");}
    }
    else
    {
      eva.cardinality = EVA.SINGLEVALUED;
    }
      break;
    case MV:
      jj_consume_token(MV);
      if(eva.cardinality != null)
      {
        {if (true) throw new ParseException("EVA " + eva.name + " can not be declared both single-valued and multi-valued");}
      }
      else
      {
        eva.cardinality = EVA.MULTIVALUED;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LP:
        jj_consume_token(LP);
        EvaMultivaluedOptions(eva);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[42] = jj_gen;
            break label_13;
          }
          jj_consume_token(COMMA);
          EvaMultivaluedOptions(eva);
        }
        jj_consume_token(RP);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      break;
    case REQUIRED:
      jj_consume_token(REQUIRED);
    if(eva.required != null)
    {
      {if (true) throw new ParseException("REQUIRED option alreadly specified for EVA " + eva.name);}
    }
    else
    {
      eva.required = true;
    }
      break;
    case INVERSE:
      jj_consume_token(INVERSE);
     if(eva.inverseEVA != null)
     {
       {if (true) throw new ParseException("INVERSE IS option alreadly spcified for EVA " + eva.name);}
     }
      eva.inverseEVA = getIdentifier();
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void EvaMultivaluedOptions(EVA eva) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
    if(eva.cardinality != EVA.MULTIVALUED || eva.distinct != null)
    {
      {if (true) throw new ParseException("DISTINCT option alreadly specified or not applicable to EVA " + eva.name);}
    }
    else
    {
      eva.distinct = true;
    }
      break;
    case MAX:
      jj_consume_token(MAX);
      if(eva.cardinality != EVA.MULTIVALUED || eva.max != null)
      {
        {if (true) throw new ParseException("MAX option alreadly specified or not applicable to EVA " + eva.name);}
      }
      eva.max = getInteger();
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public SimpleNode getExpression() throws ParseException {
                                    /*@bgen(jjtree) Root */
  Root jjtn000 = new Root(null, JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OrExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void OrExpression() throws ParseException {
                               /*@bgen(jjtree) #Or(> 1) */
  Or jjtn000 = new Or(null, JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        OrExpression();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void AndExpression() throws ParseException {
                                 /*@bgen(jjtree) #And(> 1) */
  And jjtn000 = new And(null, JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        AndExpression();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
      BoolExpression();
      break;
    case NOT:
      NotExpression();
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NotExpression() throws ParseException {
                             /*@bgen(jjtree) Not */
  Not jjtn000 = new Not(null, JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
      BoolExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BoolExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LP:
      jj_consume_token(LP);
      OrExpression();
      jj_consume_token(RP);
      break;
    case IDENTIFIER:
      CondExpression();
      break;
    case TRUE:
      TrueExpression();
      break;
    case FALSE:
      FalseExpression();
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CondExpression() throws ParseException {
 /*@bgen(jjtree) Cond */
        Cond jjtn000 = new Cond(null, JJTCOND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);AttributePath attributePath;
        Object value;
        String quantifier;
    try {
      attributePath = getAbsoluteAttributePath();
        jjtn000.setAttribute(attributePath);
      quantifier = getQuantifier();
        jjtn000.setQuantifier(quantifier);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
        value = getBoolean();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
                jjtn000.setValue(value);
        break;
      case QSTRING:
        value = getQString();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
                jjtn000.setValue(value);
        break;
      case INTEGER:
        value = getInteger();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
                jjtn000.setValue(value);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public AttributePath getAbsoluteAttributePath() throws ParseException {
        AttributePath attributePath = new AttributePath();
        String eva;
        Token t;
    attributePath.attribute = getIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LB:
      jj_consume_token(LB);
      attributePath.index = getInteger();
      jj_consume_token(RB);
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OF:
      jj_consume_token(OF);
      eva = getIdentifier();
                        attributePath.addIndirection(eva);
      label_14:
      while (true) {
        if (jj_2_6(5)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(COMMA);
        jj_consume_token(OF);
        eva = getIdentifier();
                                attributePath.addIndirection(eva);
      }
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
                {if (true) return attributePath;}
    throw new Error("Missing return statement in function");
  }

  static final public void TrueExpression() throws ParseException {
                               /*@bgen(jjtree) True */
  True jjtn000 = new True(null, JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TRUE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FalseExpression() throws ParseException {
                                 /*@bgen(jjtree) False */
  False jjtn000 = new False(null, JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FALSE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public String getQuantifier() throws ParseException {
        Token t;
        String s = new String("");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
                s = s + t.image;
                {if (true) return s.trim();}
      break;
    case NEQ:
      t = jj_consume_token(NEQ);
                s = s + t.image;
                {if (true) return s.trim();}
      break;
    case GT:
      t = jj_consume_token(GT);
                s = s + t.image;
                {if (true) return s.trim();}
      break;
    case LT:
      t = jj_consume_token(LT);
                s = s + t.image;
                {if (true) return s.trim();}
      break;
    case GTE:
      t = jj_consume_token(GTE);
                s = s + t.image;
                {if (true) return s.trim();}
      break;
    case LTE:
      t = jj_consume_token(LTE);
                s = s + t.image;
                {if (true) return s.trim();}
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String getType() throws ParseException {
  Token t = new Token();
  String s = new String("");
  char[] cs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
    s = s + t.image;
        cs = s.toLowerCase().trim().toCharArray();
        cs[0] -= 32;
    {if (true) return new String(cs);}
      break;
    case REAL:
      t = jj_consume_token(REAL);
    s = s + t.image;
        cs = s.toLowerCase().trim().toCharArray();
        cs[0] -= 32;
    {if (true) return new String(cs);}
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
    s = s + t.image;
        cs = s.toLowerCase().trim().toCharArray();
        cs[0] -= 32;
    {if (true) return new String(cs);}
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
    s = s + t.image;
        cs = s.toLowerCase().trim().toCharArray();
        cs[0] -= 32;
    {if (true) return new String(cs);}
      break;
    case STRING:
      t = jj_consume_token(STRING);
    s = s + t.image;
        cs = s.toLowerCase().trim().toCharArray();
        cs[0] -= 32;
    {if (true) return new String(cs);}
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String getIdentifier() throws ParseException {
  Token t;
  String s = new String("");
    t = jj_consume_token(IDENTIFIER);
    s = s + t.image;
    {if (true) return s.toLowerCase().replace('-', '_').trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String getLString() throws ParseException {
  Token t;
  String s = new String("");
    t = jj_consume_token(LSTRING);
    s = s + t.image;
    {if (true) return s.trim().substring(1, s.trim().length()-1).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public String getQString() throws ParseException {
  Token t;
  String s = new String("");
    t = jj_consume_token(QSTRING);
    s = s + t.image;
    {if (true) return s.trim().substring(1, s.trim().length()-1).trim();}
    throw new Error("Missing return statement in function");
  }

  static final public Integer getInteger() throws ParseException {
        Token t;
        Integer i;
    t = jj_consume_token(INTEGER);
    i = Integer.valueOf(t.image);
    {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static final public Boolean getBoolean() throws ParseException {
        Token t;
        String s = new String("");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
                {if (true) return Boolean.TRUE;}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                {if (true) return Boolean.FALSE;}
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_3R_31() {
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_34() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static final private boolean jj_3R_32() {
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SC)) return true;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_scan_token(EXCLUDE)) return true;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_38() {
    if (jj_scan_token(INCLUDE)) return true;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_scan_token(REQUIRED)) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(ASSN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_3R_35()) return true;
    return false;
  }

  static final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_scan_token(INVERSE)) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_3R_36()) return true;
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_scan_token(LB)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(RB)) return true;
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_scan_token(REQUIRED)) return true;
    return false;
  }

  static final private boolean jj_3R_50() {
    if (jj_scan_token(INITIALVALUE)) return true;
    return false;
  }

  static final private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_27() {
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_scan_token(LB)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static final private boolean jj_3R_35() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    if (jj_scan_token(ASSN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_3R_40()) return true;
    return false;
  }

  static final private boolean jj_3R_33() {
    if (jj_3R_40()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_28()) return true;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SC)) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_scan_token(QSTRING)) return true;
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_scan_token(MV)) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_scan_token(LSTRING)) return true;
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_scan_token(SV)) return true;
    return false;
  }

  static final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public QueryParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[56];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x8026000,0x8026001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x1000,0x0,0x0,0x1000,0x4000000,0x0,0x1000,0x0,0x0,0x0,0x0,0x1000,0x0,0x100,0x0,0x8000,0x100,0x0,0xc0000,0xc0000,0x0,0x0,0x10000000,0x0,0x0,0x100,0x1000,0x0,0x1000000,0x0,0x0,0x1000,0x1000,0x40,0x1c10000,0x0,0x20000000,0x10000000,0x40000040,0x40,0x0,0x100,0x8000,0x80000000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x106000,0x186000,0x6000000,0x8000000,0x2000000,0x6000000,0x8000000,0x2000000,0x6000000,0x0,0x0,0x2000000,0x6000000,0x0,0x0,0x8000000,0x0,0x10000,0x1400000,0x200000,0x6000000,0x0,0x2000000,0x0,0x2001000,0x0,0x0,0x9000060,0x0,0x0,0x6000000,0x6000000,0x0,0x6000000,0x8000000,0x0,0x0,0x9000060,0x800000,0x8000000,0x6000000,0x0,0x0,0x0,0x0,0x60000,0x0,0x0,0x2000060,0x2000060,0x9000060,0x0,0x0,0x1f,0xf80,0x60,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public QueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public QueryParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public QueryParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public QueryParser(QueryParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[61];
    for (int i = 0; i < 61; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 56; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
